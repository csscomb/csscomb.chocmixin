{
  "name": "csscomb",
  "description": "CSS coding style formatter",
  "version": "1.0.0",
  "homepage": "http://csscomb.com/",
  "author": {
    "name": "Mikhail Troshev",
    "email": "mishanga@yandex-team.ru"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/csscomb/csscomb.js"
  },
  "maintainers": [
    {
      "name": "Mikhail Troshev",
      "email": "mishanga@yandex-team.ru",
      "url": "http://mishanga.pro/"
    },
    {
      "name": "Slava Oliyanchuk",
      "email": "miripiruni@gmail.com",
      "url": "http://miripiruni.org/"
    }
  ],
  "contributors": [
    {
      "name": "Sergey Puzankov",
      "email": "puzankov@yandex-team.ru"
    },
    {
      "name": "Denis Payase",
      "email": "lostsoul@yandex-team.ru"
    },
    {
      "name": "Igor Novak",
      "email": "bezengi@gmail.com"
    },
    {
      "name": "Roman Komarov",
      "email": "kizmarh@ya.ru"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "commander": "2.0.0",
    "gonzales": "1.0.7",
    "minimatch": "0.2.12",
    "vow": "0.3.11",
    "vow-fs": "0.2.3"
  },
  "devDependencies": {
    "jshint-groups": "0.5.3",
    "jshint": "2.3.0",
    "jscs": "1.0.11",
    "mocha": "1.14.0"
  },
  "main": "./lib/csscomb.js",
  "bin": {
    "csscomb": "./bin/csscomb"
  },
  "scripts": {
    "test": "./node_modules/.bin/jshint-groups && ./node_modules/.bin/jscs . && ./node_modules/.bin/mocha -u bdd -R spec"
  },
  "readme": "# CSSComb [![CSSComb](logo.png)](http://csscomb.com/)\n[![Build Status](https://secure.travis-ci.org/csscomb/csscomb.js.png?branch=master)](http://travis-ci.org/csscomb/csscomb.js)\n\nCSSComb is a coding style formatter for CSS.\nYou can easily write your own [configuration](#configuration) to make your style sheets beautiful and consistent.\n\nThe main feature is the [sorting properties](#sort-order) in specific order.\nIt was inspired by the same-named [@miripiruni](https://github.com/miripiruni)'s [PHP-based tool](https://github.com/csscomb/csscomb).\nThis is the new JavaScript version, based on powerful CSS parser [Gonzales](https://github.com/css/gonzales).\n\n## Installation\n\n```bash\nnpm install csscomb\n```\n\nTo run `csscomb`, you can use the following command from the project root:\n\n```bash\n./node_modules/.bin/csscomb path[ path[...]]\n```\n\n```bash\n./node_modules/.bin/csscomb --help\n\n  Usage: csscomb [options] <file ...>\n\n  Options:\n\n    -h, --help           output usage information\n    -V, --version        output the version number\n    -c, --config [path]  configuration file path\n    -l, --lint           in case some fixes needed returns an error\n```\n\n## Configuration\n\n`csscomb` is configured using [.csscomb.json](https://github.com/csscomb/csscomb.js/blob/master/.csscomb.json) file, located in the project root.\n\nExample configuration:\n```json\n{\n    \"exclude\": [\"node_modules/**\"],\n    \"verbose\": true,\n\n    \"always-semicolon\": true,\n    \"block-indent\": true,\n    \"colon-space\": true,\n    \"color-case\": \"lower\",\n    \"color-shorthand\": true,\n    \"element-case\": \"lower\",\n    \"eof-newline\": true,\n    \"leading-zero\": false,\n    \"remove-empty-rulesets\": true,\n    \"rule-indent\": true,\n    \"stick-brace\": true,\n    \"strip-spaces\": true,\n    \"unitless-zero\": true,\n    \"vendor-prefix-align\": true\n}\n```\n\n## Options\n\n### exclude\n\nAvailable values: `{String[]}`\n\nArray of [Ant path patterns](http://ant.apache.org/manual/dirtasks.html#patterns) to exclude.\n\nExample: `{ \"exclude\": [\"node_modules/**\"] }` - exclude all files and directories under `node_modules` dir.\n\n### verbose\n\nAvailable value: `{Boolean}` `true`\n\nConfig mode: `{ \"verbose\": true }`\n```bash\n$ ./bin/csscomb ./test\nâœ“ test/integral.origin.css\n  test/integral.expect.css\n\n2 files processed\n1 file fixed\n96 ms spent\n```\n\nCLI mode:\n```bash\n$ ./bin/csscomb ./test --verbose\n$ ./bin/csscomb ./test -v\n```\n\n### always-semicolon\n\nAvailable value: `{Boolean}` `true`\n\nExample: `{ \"always-semicolon\": true }`\n\n```css\n/* before */\na { color: red }\n\n/* after */\na { color: red; }\n```\n\n### block-indent\n\n**Note**: better to use with [rule-indent](#rule-indent)\n\nAvailable values:\n  * `{Boolean}` `true` (means 4 spaces)\n  * `{Number}` of spaces\n  * `{String}` of whitespace characters (`/[ \\t]+/`)\n\nExample: `{ \"block-indent\": 2 }`\n\n```css\n/* before */\n  a { color: red }\n  @media all { a { color: green } }\n\n/* after */\na { color: red\n}\n@media all {\n  a { color: green\n  }\n}\n```\n\n### colon-space\n\nAvailable values:\n  * `{Boolean}` `true` (means `after`) or `false` (no whitespace at all)\n  * `{String}`: `before`, `after`, `both` or any combination of whitespaces\n  and/or a colon (` `, `: `, `\\t:\\n\\t` etc.)\n  * `{Array}` with two `{String}` values: for setting left and right whitespace around a colon\n\nExample: `{ \"colon-space\": true }`\n\n```css\n/* before */\na { color:red }\n\n/* after */\na { color: red }\n```\n\nExample: `{ \"colon-space\": \":\\n\\t\\t\" }`\n\n```css\n/* before */\na {\n  color: red;\n}\n\n/* after */\na {\n  color:\n    red;\n}\n```\n\nExample: `{ \"colon-space\": \"\" }`\n\n```css\n/* before */\na { color: red }\n\n/* after */\na { color:red }\n```\n\nExample: `{ \"colon-space\": [\"\\t\", \"\\t\"] }`\n\n```css\n/* before */\na { color: red }\n\n/* after */\na { color\t:\tred }\n```\n\n### color-case\n\nAvailable values: `{String}` `lower` or `upper`\n\nExample: `{ \"color-case\": \"lower\" }`\n\n```css\n/* before */\na { color: #FFF }\n\n/* after */\na { color: #fff }\n```\n\n### color-shorthand\n\nAvailable values: `{Boolean}` `true` or `false`\n\nExample: `{ \"color-shorthand\": true }`\n\n```css\n/* before */\nb { color: #ffcc00 }\n\n/* after */\nb { color: #fc0 }\n```\n\n### combinator-space\n\nAvailable values:\n  * `{Boolean}`: `true` sets one space, `false` removes the spaces.\n  * `{String}`: any combination of whitespaces.\n  * `{Array}` with two `{String}` values: for setting left and right whitespace.\n\nExample: `{ \"combinator-space\": true }`\n\n```css\n/* before */\na>b { color: red }\n\n/* after */\na > b { color: red }\n```\n\nExample: `{ \"combinator-space\": \"\" }`\n\n```css\n/* before */\na > b { color: red }\n\n/* after */\na>b { color: red }\n```\n\nExample: `{ \"combinator-space\": [\" \", \"\\n\"] }`\n\n```css\n/* before */\na>b { color: red }\n\n/* after */\na >\nb { color: red }\n```\n\n### element-case\n\nAvailable values: `{String}` `lower` or `upper`\n\nExample: `{ \"element-case\": \"upper\" }`\n\n```css\n/* before */\nli > a { color: red }\n\n/* after */\nLI > A { color: red }\n```\n\n### eof-newline\n\nAvailable values: `{Boolean}` `true` or `false`\n\nExample: `{ \"eof-newline\": true }`\n\n`a { color: red }` &rarr; `a { color: red }\\n`\n\nExample: `{ \"eof-newline\": false }`\n\n`a { color: red }\\n` &rarr; `a { color: red }`\n\n### leading-zero\n\nAvailable values: `{Boolean}` `true` or `false`\n\nExample: `{ \"leading-zero\": false }`\n\n```css\n/* before */\np { padding: 0.5em }\n\n/* after */\np { padding: .5em }\n```\n\n### remove-empty-rulesets\n\nAvailable values: `{Boolean}` `true`\n\nExample: `{ \"remove-empty-rulesets\": true }` - remove rulesets that have no declarations or comments.\n\n`a { color: red; } p { /* hey */ } b { }` &rarr; `a { color: red; } p { /* hey */ } `\n\n### rule-indent\n\n**Note**: better to use with [block-indent](#block-indent)\n\nAvailable values:\n  * `{Boolean}` `true` (means 4 spaces)\n  * `{Number}` of spaces\n  * `{String}` of whitespace characters (`/[ \\t]+/`)\n\nExample: `{ \"rule-indent\": 2 }`\n\n```css\n/* before */\na { color:red; margin:0 }\n\n/* after */\na {\n  color:red;\n  margin:0 }\n```\n\n### sort-order\n\n**Note**: you can use an example of [.csscomb.json](https://github.com/csscomb/csscomb.js/blob/master/.csscomb.json) to set your own sort order\n\nAvailable values:\n  * `{Array}` of rules\n  * `{Array}` of arrays of rules for groups separation\n\nExample: `{ \"sort-order\": [ \"margin\", \"padding\" ] }`\n\n```css\n/* before */\np {\n    padding: 0;\n    margin: 0;\n}\n\n/* after */\np {\n    margin: 0;\n    padding: 0;\n}\n```\n\nExample: `{ \"sort-order\": [ [ \"margin\", \"padding\" ], [ \"border\", \"background\" ] ] }`\n\n```css\n/* before */\np {\n    background: none;\n    border: 0;\n    margin: 0;\n    padding: 0;\n}\n\n/* after */\np {\n    margin: 0;\n    padding: 0;\n\n    border: 0;\n    background: none;\n}\n```\n\n### stick-brace\n\nAvailable values:\n  * `{Boolean}` `true` (means 1 space)\n  * `{Number}` of spaces\n  * `{String}` of whitespace characters (`/[ \\t\\n]+/`)\n\nExample: `{ \"stick-brace\": \"\\n\" }`\n\n```css\n/* before */\na { color:red }\n\n/* after */\na\n{ color:red }\n```\n\n### strip-spaces\n\nAvailable value: `{Boolean}` `true`\n\nExample: `{ \"strip-spaces\": true }`\n\n`a { color: red } \\n \\n \\n` &rarr; `a { color: red }\\n`\n\n`a { color: red }\\t` &rarr; `a { color: red }`\n\n### unitless-zero\n\nAvailable value: `{Boolean}` `true`\n\nExample: `{ \"unitless-zero\": true }`\n\n```css\n/* before */\nimg { border: 0px }\n\n/* after */\nimg { border: 0 }\n```\n\n### vendor-prefix-align\n\nAvailable value: `{Boolean}` `true`\n\nExample: `{ \"vendor-prefix-align\": true }`\n\n```css\n/* before */\na\n{\n    -webkit-border-radius: 3px;\n    -moz-border-radius: 3px;\n    border-radius: 3px;\n    background: -webkit-linear-gradient(top, #fff 0, #eee 100%);\n    background: -moz-linear-gradient(top, #fff 0, #eee 100%);\n    background: linear-gradient(to bottom, #fff 0, #eee 100%);\n}\n\n/* after */\na\n{\n    -webkit-border-radius: 3px;\n       -moz-border-radius: 3px;\n            border-radius: 3px;\n    background: -webkit-linear-gradient(top, #fff 0, #eee 100%);\n    background:    -moz-linear-gradient(top, #fff 0, #eee 100%);\n    background:         linear-gradient(to bottom, #fff 0, #eee 100%);\n}\n```\n\n## Tests\n\nRun `npm test` for tests.\n\n## Contributing\n\nAnyone and everyone is welcome to contribute. Please take a moment to\nreview the [guidelines for contributing](CONTRIBUTE.md).\n\n## Authors\n\n[@mishanga](https://github.com/mishanga)\n\nThanks for assistance and contributions:\n\n[@miripiruni](https://github.com/miripiruni),\n[@puzankov](https://github.com/puzankov),\n[@L0stSoul](https://github.com/L0stSoul),\n[@ignovak](https://github.com/ignovak),\n[@kizu](https://github.com/kizu),\n[@anton-rudeshko](https://github.com/anton-rudeshko),\n[@mishaberezin](https://github.com/mishaberezin)\n\n## License\n\nThis software is released under the terms of the [MIT license](https://github.com/csscomb/csscomb.js/blob/master/LICENSE).\n\n## Other projects\n* https://github.com/senchalabs/cssbeautify\n* https://github.com/css/gonzales\n* https://github.com/css/csso\n* https://github.com/nzakas/parser-lib\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/csscomb/csscomb.js/issues"
  },
  "_id": "csscomb@1.0.0",
  "dist": {
    "shasum": "632da2730d02003530c29353585a88d1d4dd5338"
  },
  "_from": "csscomb@",
  "_resolved": "https://registry.npmjs.org/csscomb/-/csscomb-1.0.0.tgz"
}
